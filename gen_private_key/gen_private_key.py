import gmpy2

def ex_euclid(a, b):
    """
    拡張ユークリッドの互除法を使って，
    一次不定方程式 ax + by = gcd(a, b)を解く
    (a > b)
    returns
    -------
    n: int n = gcd(a, b)
    x: int 解x
    y: int 解y
    """
    assert a > b and b > 0
    x1, y1, m = 1, 0, a
    x2, y2, n = 0, 1, b
    while m % n != 0:
        q = m // n
        x1, y1, m, x2, y2, n = x2, y2, n, x1-q*x2, y1-q*y2, m-q*n
    return (n, x2, y2)

def gen_key(p: int, q: int, e: int):
    """
    RSA 暗号鍵を生成
    return
    ------
    n: int 公開鍵
    d: int 秘密鍵
    """
    assert gmpy2.is_prime(p) and gmpy2.is_prime(q)
    n = p * q
    phi_n = (p-1) * (q-1)
    _, _, d = ex_euclid(phi_n, e)
    while d <= 0:
        d += phi_n
    return (n, d)

n = 23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239
p = 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433
q = n // p
# print('q:', q)
e = 65537
# print(gmpy2.is_prime(p))
# print(gmpy2.is_prime(q))
n1, d = gen_key(q, p, e)
c = 14177987223508642131782797570705581865562801943020304324633179842233648468773284681099013143283137490421880620316003804700542539367277056119924780390073376368416200076614798528210303393148038397972770835314176889384910743248227379602503304665968858682295687434435804347875820140516870497567301408412715581672979699897049453701769585723745678466885154478156861404094657217832388752774912467316297776811251467400544288767645372505477570969704731692064200678746651536132006463037418757874224499384628808197361618023507921293784071910631939869468132820891513863046467487362047958571217107053268878096051632274561080703969
m1 = pow(c, d, n)
print('m1:', m1)
m2 = hex(m1)
print('m2:', m2)
